using SPICE
using Statistics: mean

file = "pck00010.tpc"
furnsh(file)

ids = Set([])
re = r"BODY(?<id>[0-9]+)_PM\s+="
lines = open(readlines, file)
for line in lines
    s = string(line)
    if occursin(re, s)
        m = match(re, s)
        push!(ids, m["id"])
    end
end

open("pck.jl", "w") do f
    write(f, "# Automatically generated by $(basename(@__FILE__)), do not edit!\n\n")
    for id in ids
        body = replace(titlecase(bodc2n(parse(Int, id))), r"\s"=>"")
        body = body == "Moon" ? "Luna" : body

        # Radii
        try
            r = bodvrd(id, "RADII")
            subplan, along, polar = r
            write(f, "subplanetary_radius(::Type{Float64}, ::$body) = $subplan\n")
            write(f, "subplanetary_radius(::$body) = subplanetary_radius(Float64, $body())\n")
            write(f, "along_orbit_radius(::Type{Float64}, ::$body) = $along\n")
            write(f, "along_orbit_radius(::$body) = along_orbit_radius(Float64, $body())\n")
            if subplan == along
                write(f, "equatorial_radius(::Type{Float64}, ::$body) = $subplan\n")
                write(f, "equatorial_radius(::$body) = equatorial_radius(Float64, $body())\n")
            end
            write(f, "polar_radius(::Type{Float64}, ::$body) = $polar\n")
            write(f, "polar_radius(::$body) = polar_radius(Float64, $body())\n")
            write(f, "mean_radius(::Type{Float64}, ::$body) = $(mean(r))\n")
            write(f, "mean_radius(::$body) = mean_radius(Float64, $body())\n")
        catch err
            err isa SpiceError || rethrow(err)
        end

        # Right ascension
        try
            ra = deg2rad.(bodvrd(id, "POLE_RA"))
            n = length(ra)
            ra1 = zeros(3)
            ra1[1:n] .+= ra[1:n]
            alpha0, alpha1, alpha2 = ra1
            write(f, "alpha0(::Type{Float64}, ::$body) = $alpha0\n")
            write(f, "alpha0(::$body) = alpha0(Float64, $body())\n")
            write(f, "alpha1(::Type{Float64}, ::$body) = $alpha1\n")
            write(f, "alpha1(::$body) = alpha1(Float64, $body())\n")
            write(f, "alpha2(::Type{Float64}, ::$body) = $alpha2\n")
            write(f, "alpha2(::$body) = alpha2(Float64, $body())\n")
        catch err
            err isa SpiceError || rethrow(err)
        end
        try
            n = length(bodvrd(id[1:1], "NUT_PREC_ANGLES")) ÷ 2
            ra = zeros(n)
            ra′ = deg2rad.(bodvrd(id, "NUT_PREC_RA"))
            ra[1:length(ra′)] .+= ra′
            write(f, "alpha(::Type{Float64}, ::$body) = [$(join(ra, ", "))]\n")
            write(f, "alpha(::$body) = alpha(Float64, $body())\n")
        catch err
            err isa SpiceError || rethrow(err)
        end

        # Declination
        try
            dec = deg2rad.(bodvrd(id, "POLE_DEC"))
            n = length(dec)
            dec1 = zeros(3)
            dec1[1:n] .+= dec[1:n]
            delta0, delta1, delta2 = dec1
            write(f, "delta0(::Type{Float64}, ::$body) = $delta0\n")
            write(f, "delta0(::$body) = delta0(Float64, $body())\n")
            write(f, "delta1(::Type{Float64}, ::$body) = $delta1\n")
            write(f, "delta1(::$body) = delta1(Float64, $body())\n")
            write(f, "delta2(::Type{Float64}, ::$body) = $delta2\n")
            write(f, "delta2(::$body) = delta2(Float64, $body())\n")
        catch err
            err isa SpiceError || rethrow(err)
        end
        try
            n = length(bodvrd(id[1:1], "NUT_PREC_ANGLES")) ÷ 2
            dec = zeros(n)
            dec′ = deg2rad.(bodvrd(id, "NUT_PREC_DEC"))
            dec[1:length(dec′)] .+= dec′
            write(f, "delta(::Type{Float64}, ::$body) = [$(join(dec, ", "))]\n")
            write(f, "delta(::$body) = delta(Float64, $body())\n")
        catch err
            err isa SpiceError || rethrow(err)
        end

        # Rotation
        try
            pm = deg2rad.(bodvrd(id, "PM"))
            n = length(pm)
            pm1 = zeros(3)
            pm1[1:n] .+= pm[1:n]
            omega0, omega1, omega2 = pm1
            write(f, "omega0(::Type{Float64}, ::$body) = $omega0\n")
            write(f, "omega0(::$body) = omega0(Float64, $body())\n")
            write(f, "omega1(::Type{Float64}, ::$body) = $omega1\n")
            write(f, "omega1(::$body) = omega1(Float64, $body())\n")
            write(f, "omega2(::Type{Float64}, ::$body) = $omega2\n")
            write(f, "omega2(::$body) = omega2(Float64, $body())\n")
        catch err
            err isa SpiceError || rethrow(err)
        end
        try
            n = length(bodvrd(id[1:1], "NUT_PREC_ANGLES")) ÷ 2
            pm = zeros(n)
            pm′ = deg2rad.(bodvrd(id, "NUT_PREC_PM"))
            pm[1:length(pm′)] .+= pm′
            write(f, "omega(::Type{Float64}, ::$body) = [$(join(pm, ", "))]\n")
            write(f, "omega(::$body) = omega(Float64, $body())\n")
        catch err
            err isa SpiceError || rethrow(err)
        end

        # Nutation / Precession
        try
            length(id) != 3 && continue
            np = deg2rad.(reshape(bodvrd(id[1:1], "NUT_PREC_ANGLES"), 2, :))
            write(f, "theta0(::Type{Float64}, ::$body) = [$(join(np[1,:], ", "))]\n")
            write(f, "theta0(::$body) = theta0(Float64, $body())\n")
            write(f, "theta1(::Type{Float64}, ::$body) = [$(join(np[2,:], ", "))]\n")
            write(f, "theta1(::$body) = theta1(Float64, $body())\n")
        catch err
            err isa SpiceError || rethrow(err)
        end
    end
end
